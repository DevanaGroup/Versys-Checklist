interface LocationData {
  latitude: number;
  longitude: number;
  city?: string;
  country?: string;
  region?: string;
  timezone?: string;
  isp?: string;
}

// Fun√ß√£o para obter localiza√ß√£o via geolocaliza√ß√£o do navegador
export const getLocationByGeolocation = (useCache: boolean = false): Promise<LocationData> => {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject(new Error('Geolocaliza√ß√£o n√£o suportada'));
      return;
    }

    console.log('üåç Solicitando geolocaliza√ß√£o do navegador...');
    
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude, accuracy } = position.coords;
        console.log('‚úÖ Localiza√ß√£o obtida:', { latitude, longitude, accuracy: `${accuracy.toFixed(0)}m` });
        resolve({
          latitude,
          longitude,
        });
      },
      (error) => {
        let errorMessage = 'Erro desconhecido ao obter localiza√ß√£o';
        
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = 'üö´ Permiss√£o de localiza√ß√£o negada. Por favor, permita o acesso √† localiza√ß√£o nas configura√ß√µes do navegador.';
            console.error('‚ùå PERMISS√ÉO NEGADA:', errorMessage);
            console.log('üí° Para permitir:');
            console.log('   ‚Ä¢ Chrome: Clique no √≠cone de cadeado/informa√ß√£o ao lado da URL > Permiss√µes > Localiza√ß√£o > Permitir');
            console.log('   ‚Ä¢ Safari: Configura√ß√µes > Safari > Localiza√ß√£o > Este site > Permitir');
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = 'üìç Localiza√ß√£o indispon√≠vel. GPS pode estar desligado ou sinal fraco.';
            console.error('‚ùå LOCALIZA√á√ÉO INDISPON√çVEL:', errorMessage);
            break;
          case error.TIMEOUT:
            errorMessage = '‚è±Ô∏è Tempo esgotado ao obter localiza√ß√£o. Tente novamente.';
            console.error('‚ùå TIMEOUT:', errorMessage);
            break;
          default:
            errorMessage = `‚ùå Erro ao obter localiza√ß√£o: ${error.message}`;
            console.error('‚ùå ERRO NA GEOLOCALIZA√á√ÉO:', {
              code: error.code,
              message: error.message
            });
        }
        
        reject(new Error(errorMessage));
      },
      {
        enableHighAccuracy: true,
        timeout: 30000, // Aumentado para 30 segundos
        maximumAge: useCache ? 60000 : 0, // Se useCache=true usa 1 min, sen√£o for√ßa GPS fresco
      }
    );
  });
};

// Fun√ß√£o principal que usa apenas geolocaliza√ß√£o do navegador
export const getLocation = async (useCache: boolean = false): Promise<LocationData | null> => {
  try {
    const geoLocation = await getLocationByGeolocation(useCache);
    return geoLocation;
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na geolocaliza√ß√£o:', error);
    return null;
  }
};

// Fun√ß√£o para obter localiza√ß√£o com fallback para coordenadas padr√£o
export const getLocationWithFallback = async (useCache: boolean = false): Promise<LocationData> => {
  try {
    const location = await getLocation(useCache);
    if (location) {
      console.log('‚úÖ Localiza√ß√£o obtida com sucesso');
      return location;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao obter localiza√ß√£o, usando fallback:', error);
  }

  // Fallback: coordenadas gen√©ricas (centro do Brasil)
  console.log('üìç Usando localiza√ß√£o fallback');
  return {
    latitude: 0,
    longitude: 0,
    city: 'Localiza√ß√£o n√£o dispon√≠vel',
    country: '',
    region: '',
  };
}; 